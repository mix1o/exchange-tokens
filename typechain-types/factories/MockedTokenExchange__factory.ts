/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockedTokenExchange,
  MockedTokenExchangeInterface,
} from "../MockedTokenExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_decimals",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isBuy",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "_tokenADecimals",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenBDecimals",
        type: "uint256",
      },
    ],
    name: "mockCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806340247ef814610030575b600080fd5b61004361003e366004610111565b610059565b6040516100509190610167565b60405180910390f35b60008073__$abe6619838ad1a445bc0eed969503c58dc$__63ac9e60158989898989896040518763ffffffff1660e01b815260040161009d96959493929190610170565b60206040518083038186803b1580156100b557600080fd5b505af41580156100c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ed91906100f9565b98975050505050505050565b60006020828403121561010a578081fd5b5051919050565b60008060008060008060c08789031215610129578182fd5b8635955060208701359450604087013593506060870135801515811461014d578283fd5b9598949750929560808101359460a0909101359350915050565b90815260200190565b9586526020860194909452604085019290925215156060840152608083015260a082015260c0019056fea2646970667358221220ba8deb086ee8099094d0f1975f3788d3007e54c597f999d58746038d7b05dfa264736f6c63430008010033";

type MockedTokenExchangeConstructorParams =
  | [linkLibraryAddresses: MockedTokenExchangeLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockedTokenExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockedTokenExchange__factory extends ContractFactory {
  constructor(...args: MockedTokenExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockedTokenExchange__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockedTokenExchangeLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$abe6619838ad1a445bc0eed969503c58dc\\$__", "g"),
      linkLibraryAddresses["contracts/TokenCount.sol:TokenCount"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockedTokenExchange> {
    return super.deploy(overrides || {}) as Promise<MockedTokenExchange>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockedTokenExchange {
    return super.attach(address) as MockedTokenExchange;
  }
  connect(signer: Signer): MockedTokenExchange__factory {
    return super.connect(signer) as MockedTokenExchange__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedTokenExchangeInterface {
    return new utils.Interface(_abi) as MockedTokenExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedTokenExchange {
    return new Contract(address, _abi, signerOrProvider) as MockedTokenExchange;
  }
}

export interface MockedTokenExchangeLibraryAddresses {
  ["contracts/TokenCount.sol:TokenCount"]: string;
}
