/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MockedTokenExchangeInterface extends ethers.utils.Interface {
  functions: {
    "mockCount(uint256,uint256,uint256,bool,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mockCount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "mockCount", data: BytesLike): Result;

  events: {};
}

export interface MockedTokenExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockedTokenExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mockCount(
      _amount: BigNumberish,
      _price: BigNumberish,
      _decimals: BigNumberish,
      _isBuy: boolean,
      _tokenADecimals: BigNumberish,
      _tokenBDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  mockCount(
    _amount: BigNumberish,
    _price: BigNumberish,
    _decimals: BigNumberish,
    _isBuy: boolean,
    _tokenADecimals: BigNumberish,
    _tokenBDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    mockCount(
      _amount: BigNumberish,
      _price: BigNumberish,
      _decimals: BigNumberish,
      _isBuy: boolean,
      _tokenADecimals: BigNumberish,
      _tokenBDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    mockCount(
      _amount: BigNumberish,
      _price: BigNumberish,
      _decimals: BigNumberish,
      _isBuy: boolean,
      _tokenADecimals: BigNumberish,
      _tokenBDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mockCount(
      _amount: BigNumberish,
      _price: BigNumberish,
      _decimals: BigNumberish,
      _isBuy: boolean,
      _tokenADecimals: BigNumberish,
      _tokenBDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
